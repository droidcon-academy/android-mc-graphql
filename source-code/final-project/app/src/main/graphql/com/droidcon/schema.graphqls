type Query {
  colleges: [CollegeType!]!

  paginationColleges(skip: Int! = 0, limit: Int! = 5): PaginationCollegeType!

  collegeById(collegeId: Int!): CollegeType!

  students: [StudentType!]!

  studentById(studentId: Int!): StudentType!

  studentsByCollegeId(collegeId: Int!): [StudentType!]!
}

type CollegeType {
  id: Int!

  name: String!

  location: String!

  establishedYear: String!

  profileUrl: String!
}

type PaginationCollegeType {
  total: Int!

  limit: Int!

  size: Int!

  nextPage: Int

  colleges: [CollegeType!]!
}

type StudentType {
  id: Int!

  name: String!

  dob: String!

  collegeId: Int!

  profileUrl: String!

  gender: String!
}

type Mutation {
  createCollege(name: String!, location: String!, establishedYear: String!): CollegeType!

  deleteCollege(collegeId: Int!): ResponseType!

  createStudent(name: String!, dob: String!, gender: String!, profileUrl: String!, collegeId: Int!): StudentType!

  deleteStudent(studentId: Int!): ResponseType!
}

type ResponseType {
  message: String!
}

type Subscription {
  subscribeStudent(collegeId: Int!): StudentType!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
